<!doctype html>
<html>

<head>
    <meta charset="utf-8">
    <title>PUMP & DUMP</title>
    <style>
        html,
        body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: rgb(245, 247, 250);
        }

        /* Parent container with light background */
        #container {
            width: 80%;
            height: 80%;
            background-color: #1bbdbd;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        #board {
            width: 100%;
            height: 100%;
            position: relative;
            overflow: hidden;
            background-color: rgb(245, 247, 250);
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .card {
            width: 320px;
            height: 320px;
            position: absolute;
            top: 50%;
            left: 50%;
            border-radius: 1%;
            box-shadow: 0px 4px 4px 0px rgba(0, 0, 0, 0.1);
            background-color: white;
            transform: translateX(-50%) translateY(-50%) scale(0.95);
        }

        .card-text {
            position: absolute;
            bottom: 20px;
            left: 20px;
            color: white;
            font-size: 18px;
            font-weight: bold;
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
        }

        .price-tag {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(255, 99, 71, 0.9);
            color: white;
            padding: 5px 10px;
            font-size: 16px;
            font-weight: bold;
            border-radius: 5px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
        }

        .logo {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 30px;
            height: 30px;
        }

        /* Adjusted container for the description */
        #description-container {
            width: 400px;
            height: auto;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            box-sizing: border-box;
            font-size: 16px;
            color: #333;
            margin-top: 20px;
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }
    </style>
</head>

<body>
    <!-- Parent container with light background -->
    <div id="container">
        <div id="board"></div>

        <!-- Adjusted description container -->
        <div id="description-container">
            Click or swipe a card to see more details here.
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>
    <script>
        class Carousel {

            constructor(element, descriptionElement) {
                this.board = element;
                this.descriptionContainer = descriptionElement;
                // Add cards with text, price, description, and logo
                this.push("Pepe", "$25", "Pepe is a famous internet meme and symbol of culture.", "st1.png");
                this.push("SOL", "$35", "SOL is the future of decentralized blockchain.", "st1.png");
                this.push("Degan", "$45", "Degan is a leader in decentralized finance.", "st1.png");
                this.push("Helene", "$20", "Helene is known for her passion for art and creativity.", "st1.png");
                this.push("Moon", "$56", "Moon is an adventurer exploring the galaxy.", "st1.png");
                this.push("Nitro", "$15", "Nitro is a symbol of energy and performance.", "st1.png");

                this.handle();
            }

            handle() {
                this.cards = this.board.querySelectorAll('.card');
                this.topCard = this.cards[this.cards.length - 1];
                this.nextCard = this.cards[this.cards.length - 2];

                if (this.cards.length > 0) {
                    this.topCard.style.transform =
                        'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)';

                    if (this.hammer) this.hammer.destroy();

                    this.hammer = new Hammer(this.topCard);
                    this.hammer.add(new Hammer.Tap());
                    this.hammer.add(new Hammer.Pan({
                        position: Hammer.position_ALL,
                        threshold: 0
                    }));

                    this.hammer.on('tap', (e) => {
                        this.onTap(e);
                    });
                    this.hammer.on('pan', (e) => {
                        this.onPan(e);
                    });

                    // Display description for the first card
                    this.updateDescription(this.topCard.getAttribute('data-description'));
                }
            }

            onTap(e) {
                let propX = (e.center.x - e.target.getBoundingClientRect().left) / e.target.clientWidth;
                let rotateY = 15 * (propX < 0.05 ? -1 : 1);
                this.topCard.style.transition = 'transform 100ms ease-out';
                this.topCard.style.transform =
                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(' + rotateY + 'deg) scale(1)';

                setTimeout(() => {
                    this.topCard.style.transform =
                        'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)';
                }, 100);

                // Update the description when card is tapped
                this.updateDescription(this.topCard.getAttribute('data-description'));
            }

            onPan(e) {
                if (!this.isPanning) {
                    this.isPanning = true;
                    this.topCard.style.transition = null;
                    if (this.nextCard) this.nextCard.style.transition = null;

                    let style = window.getComputedStyle(this.topCard);
                    let mx = style.transform.match(/^matrix\((.+)\)$/);
                    this.startPosX = mx ? parseFloat(mx[1].split(', ')[4]) : 0;
                    this.startPosY = mx ? parseFloat(mx[1].split(', ')[5]) : 0;
                    let bounds = this.topCard.getBoundingClientRect();
                    this.isDraggingFrom =
                        (e.center.y - bounds.top) > this.topCard.clientHeight / 2 ? -1 : 1;
                }

                let posX = e.deltaX + this.startPosX;
                let posY = e.deltaY + this.startPosY;
                let propX = e.deltaX / this.board.clientWidth;
                let propY = e.deltaY / this.board.clientHeight;
                let dirX = e.deltaX < 0 ? -1 : 1;
                let deg = this.isDraggingFrom * dirX * Math.abs(propX) * 45;
                let scale = (95 + (5 * Math.abs(propX))) / 100;

                this.topCard.style.transform =
                    'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg) rotateY(0deg) scale(1)';

                if (this.nextCard) this.nextCard.style.transform =
                    'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(' + scale + ')';

                if (e.isFinal) {
                    this.isPanning = false;
                    let successful = false;

                    this.topCard.style.transition = 'transform 200ms ease-out';
                    if (this.nextCard) this.nextCard.style.transition = 'transform 100ms linear';

                    if (propX > 0.25 && e.direction == Hammer.DIRECTION_RIGHT) {
                        successful = true;
                        posX = this.board.clientWidth;
                    } else if (propX < -0.25 && e.direction == Hammer.DIRECTION_LEFT) {
                        successful = true;
                        posX = -(this.board.clientWidth + this.topCard.clientWidth);
                    } else if (propY < -0.25 && e.direction == Hammer.DIRECTION_UP) {
                        successful = true;
                        posY = -(this.board.clientHeight + this.topCard.clientHeight);
                    }

                    if (successful) {
                        this.topCard.style.transform =
                            'translateX(' + posX + 'px) translateY(' + posY + 'px) rotate(' + deg + 'deg)';

                        setTimeout(() => {
                            this.board.removeChild(this.topCard);
                            this.push("New Coins", "$50", "A fresh addition to the crypto scene.", "st1.png");
                            this.handle();
                        }, 200);

                    } else {
                        this.topCard.style.transform =
                            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(1)';
                        if (this.nextCard) this.nextCard.style.transform =
                            'translateX(-50%) translateY(-50%) rotate(0deg) rotateY(0deg) scale(0.95)';
                    }

                    // Update the description when card is panned (swiped)
                    this.updateDescription(this.topCard.getAttribute('data-description'));
                }
            }

            // Updated push method to accept text, price, description, and logo
            push(text, price, description, logoUrl) {
                let card = document.createElement('div');
                card.classList.add('card');
                card.style.backgroundImage =
                    "url('https://picsum.photos/320/320/?random=" + Math.round(Math.random() * 1000000) + "')";
                card.setAttribute('data-description', description);

                // Create a text element inside the card
                let textElement = document.createElement('div');
                textElement.classList.add('card-text');
                textElement.innerText = text;

                // Create a price tag element inside the card
                let priceElement = document.createElement('div');
                priceElement.classList.add('price-tag');
                priceElement.innerText = price;

                // Create a logo image element inside the card
                let logoElement = document.createElement('img');
                logoElement.classList.add('logo');
                logoElement.src = logoUrl;

                // Append text, price, and logo elements to the card
                card.appendChild(textElement);
                card.appendChild(priceElement);
                card.appendChild(logoElement);

                this.board.insertBefore(card, this.board.firstChild);
            }

            // Update description in the description container
            updateDescription(description) {
                this.descriptionContainer.innerText = description;
            }

        }

        let board = document.querySelector('#board');
        let descriptionContainer = document.querySelector('#description-container');
        let carousel = new Carousel(board, descriptionContainer);
    </script>
</body>

</html>
